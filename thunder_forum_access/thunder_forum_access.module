<?php

/**
 * @file
 * Provide extended access control for forums.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Core\Database\Query\AlterableInterface;
use Drupal\Core\Database\Query\ConditionInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;
use Drupal\taxonomy\TermInterface;
use Drupal\thunder_forum_access\Access\ForumAccessMatrixInterface;
use Drupal\thunder_forum_reply\Plugin\Field\FieldType\ForumReplyItemInterface;

/**
 * Implements hook_entity_bundle_field_info_alter().
 */
function thunder_forum_access_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  // Add constraint to ensure posting to selected forum is allowed.
  if ($entity_type->id() == 'node' && !empty($fields['taxonomy_forums'])) {
    $fields['taxonomy_forums']->addConstraint('ThunderForumAccessAllowedToPostInForum', []);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function thunder_forum_access_form_forum_overview_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\thunder_forum_access\Access\ForumAccessHelperInterface $forum_access_helper */
  $forum_access_helper = \Drupal::service('thunder_forum_access.forum_access_helper');

  // Alter forum taxonomy term overview form.
  $forum_access_helper->alterForumTermOverviewForm($form, $form_state, $form_id);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for \Drupal\node\NodeForm.
 */
function thunder_forum_access_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\thunder_forum_access\Access\ForumAccessHelperInterface $forum_access_helper */
  $forum_access_helper = \Drupal::service('thunder_forum_access.forum_access_helper');

  // Alter forum node form.
  $forum_access_helper->alterForumNodeForm($form, $form_state, $form_id);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function thunder_forum_access_form_taxonomy_term_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\thunder_forum_access\Access\ForumAccessHelperInterface $forum_access_helper */
  $forum_access_helper = \Drupal::service('thunder_forum_access.forum_access_helper');

  // Alter forum taxonomy term form.
  $forum_access_helper->alterForumTermForm($form, $form_state, $form_id);
}

/**
 * Implements hook_ENTITY_TYPE_insert() for taxonomy_term entities.
 */
function thunder_forum_access_taxonomy_term_insert(TermInterface $entity) {
  /** @var \Drupal\thunder_forum_access\Access\ForumAccessRecordStorageInterface $forum_access_storage */
  $forum_access_storage = \Drupal::service('thunder_forum_access.forum_access_record_storage');

  // Insert forum access record.
  $forum_access_storage->termInsert($entity);
}

/**
 * Implements hook_ENTITY_TYPE_delete() for taxonomy_term entities.
 */
function thunder_forum_access_taxonomy_term_delete(TermInterface $entity) {
  /** @var \Drupal\thunder_forum_access\Access\ForumAccessRecordStorageInterface $forum_access_storage */
  $forum_access_storage = \Drupal::service('thunder_forum_access.forum_access_record_storage');

  // Delete forum access record.
  $forum_access_storage->termDelete($entity);
}

/**
 * Implements hook_ENTITY_TYPE_presave() for taxonomy_term entities.
 */
function thunder_forum_access_taxonomy_term_presave(TermInterface $entity) {
  /** @var \Drupal\thunder_forum_access\Access\ForumAccessRecordStorageInterface $forum_access_storage */
  $forum_access_storage = \Drupal::service('thunder_forum_access.forum_access_record_storage');

  // Perform pre-save operations.
  $forum_access_storage->termPreSave($entity);
}

/**
 * Implements hook_ENTITY_TYPE_update() for taxonomy_term entities.
 */
function thunder_forum_access_taxonomy_term_update(TermInterface $entity) {
  /** @var \Drupal\thunder_forum_access\Access\ForumAccessRecordStorageInterface $forum_access_storage */
  $forum_access_storage = \Drupal::service('thunder_forum_access.forum_access_record_storage');

  // Update forum access record.
  $forum_access_storage->termUpdate($entity);
}

/**
 * Implements hook_ENTITY_TYPE_delete() for user entities.
 */
function thunder_forum_access_user_delete(AccountInterface $entity) {
  /** @var \Drupal\thunder_forum_access\Access\ForumAccessRecordStorageInterface $forum_access_storage */
  $forum_access_storage = \Drupal::service('thunder_forum_access.forum_access_record_storage');

  // Delete forum access records.
  $forum_access_storage->userDelete($entity);
}

/**
 * Implements hook_thunder_forum_access_records_change().
 */
function thunder_forum_access_thunder_forum_access_records_change(array $tids, $parent_tid) {
  $tags = [];

  // Include parent term ID in affected taxonomy term ID list.
  if ($parent_tid) {
    $tids[] = $parent_tid;
  }

  // Build list of cache tags for affected forum taxonomy terms.
  foreach ($tids as $tid) {
    $tags[] = 'taxonomy_term:' . $tid;
  }

  // Invalidate cache records for affected forum taxonomy terms.
  Cache::invalidateTags($tags);
}

/**
 * Implements hook_preprocess_HOOK() for forum icon.
 */
function thunder_forum_access_preprocess_thunder_forum_icon(&$variables) {
  $variables['#cache']['contexts'][] = 'user.roles:authenticated';
  $current_user = \Drupal::currentUser();

  if ($current_user->isAuthenticated()) {
    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
    $entity = $variables['entity'];

    switch ($entity->getEntityTypeId()) {
      case 'node':
        /** @var \Drupal\thunder_forum_reply\ForumReplyManagerInterface $forum_reply_manager */
        $forum_reply_manager = \Drupal::service('thunder_forum_reply.manager');
        $field_names = array_keys($forum_reply_manager->getFields());

        if ($field_names) {
          $field_name = reset($field_names);

          $create_forum_reply_access = \Drupal::entityTypeManager()
            ->getAccessControlHandler('thunder_forum_reply')
            ->createAccess('thunder_forum_reply', NULL, [
              'field_name' => $field_name,
              'nid' => $entity->id(),
            ], TRUE);

          // Topic is locked?
          $variables['locked'] = !$create_forum_reply_access->isAllowed() || !($entity->hasField('forum_replies') && (int) $entity->get('forum_replies')->status === ForumReplyItemInterface::OPEN);

          // Add forum reply to cache dependencies.
          CacheableMetadata::createFromRenderArray($variables)
            ->addCacheableDependency($create_forum_reply_access)
            ->applyTo($variables);
        }
        break;

      case 'taxonomy_term':
        /** @var \Drupal\thunder_forum_access\Access\ForumAccessManagerInterface $forum_access_manager */
        $forum_access_manager = \Drupal::service('thunder_forum_access.forum_access_manager');

        // Load forum access record.
        $record = $forum_access_manager->getForumAccessRecord($entity->id());

        $allowed_to_create_topics = $record->userHasPermission($current_user, 'node', ForumAccessMatrixInterface::PERMISSION_CREATE);
        $allowed_to_create_replies = $record->userHasPermission($current_user, 'thunder_forum_repls', ForumAccessMatrixInterface::PERMISSION_CREATE);
        $variables['locked'] = !($allowed_to_create_topics || $allowed_to_create_replies);

        // Add forum access record to cache dependencies.
        CacheableMetadata::createFromRenderArray($variables)
          ->addCacheableDependency($record)
          ->applyTo($variables);
        break;
    }
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function thunder_forum_access_query_taxonomy_term_access_alter(AlterableInterface $query) {
  /* @var $query \Drupal\Core\Database\Query\SelectInterface */
  if ($query->hasTag('thunder_forum_access')) {
    return;
  }
  $account = \Drupal::currentUser();
  if ($account->hasPermission('administer forums')) {
    // No need to add additional checks.
    return;
  }

  $table = array_filter($query->getTables(), function ($data) {
    return !empty($data['table']) && 'taxonomy_term_field_data' === $data['table'];
  });
  if (empty($table)) {
    // Something really strange is happening.
    return;
  }
  $table = reset($table);

  if (!_thunder_forum_access_query_has_forum_condition($query, $table['alias'], \Drupal::config('forum.settings')->get('vocabulary'))) {
    // The query does not return forum terms.
    return;
  }

  // Add custom tag.
  $query->addTag('thunder_forum_access');

  // Join to permission table (for anonymous and authenticated users).
  $query_args = [
    ':entity_type' => 'taxonomy_term',
    ':permission' => 'view',
    ':role' => $account->isAnonymous() ? 'anonymous' : 'authenticated',
    ':uid' => $account->id(),
  ];
  _thunder_forum_access_alter_query_access($query, $table['alias'], 'tid', $query_args);
  // Exclude items without view permission.
  $or = $query->orConditionGroup();
  $or->isNull('tfa.tid');
  $or_null = $query->orConditionGroup();
  $or_null->isNotNull('tfp1.tid');
  $or_null->isNotNull('tfp2.tid');
  $or->condition($or_null);
  $query->condition($or);
  $query->distinct();
}

/**
 * Implements hook_query_TAG_alter().
 */
function thunder_forum_access_query_node_access_alter(AlterableInterface $query) {
  if (!$query->hasTag('views_forum_topics')) {
    return;
  }
  $account = \Drupal::currentUser();
  if ($account->hasPermission('administer forums')) {
    // No need to add additional checks.
    return;
  }

  $table = array_filter($query->getTables(), function ($data) {
    return !empty($data['table']) && 'taxonomy_term_field_data' === $data['table'];
  });
  if (empty($table)) {
    // Something really strange is happening.
    return;
  }
  $table = reset($table);

  // Add custom tag.
  $query->addTag('thunder_forum_topic_access');

  // Join to permission table (for anonymous and authenticated users).
  $query_args = [
    ':entity_type' => 'taxonomy_term',
    ':permission' => 'view',
    ':role' => $account->isAnonymous() ? 'anonymous' : 'authenticated',
    ':uid' => $account->id(),
  ];
  _thunder_forum_access_alter_query_access($query, $table['alias'], 'tid', $query_args);
  // Exclude items without view permission.
  $or = $query->orConditionGroup();
  $or->isNull('tfa.tid');
  $or_null = $query->orConditionGroup();
  $or_null->isNotNull('tfp1.tid');
  $or_null->isNotNull('tfp2.tid');
  $or->condition($or_null);
  $query->condition($or);
}

/**
 * Implements hook_query_alter().
 */
function thunder_forum_access_query_alter(AlterableInterface $query) {
  // This is necessary because hook_query_TAG_alter() isn't called on pager
  // queries!
  if (!$query->hasTag('thunder_forum_reply_access')) {
    return;
  }
  $account = \Drupal::currentUser();
  if ($account->hasPermission('administer forums')) {
    // No need to add additional checks.
    return;
  }

  $table = array_filter($query->getTables(), function ($data) {
    return !empty($data['table']) && 'thunder_forum_reply_field_data' === $data['table'];
  });
  if (empty($table)) {
    // Something really strange is happening.
    return;
  }
  $table = reset($table);

  /* @var $entity Drupal\node\NodeInterface */
  if (($base_table = $query->getMetaData('base_table')) === NULL || ($entity = $query->getMetaData('entity')) === NULL || !($entity instanceof NodeInterface)) {
    return;
  }
  if (('thunder_forum_reply' !== $base_table) || ('forum' !== $entity->getType())) {
    return;
  }

  // Join to forum index.
  $query->join('forum_index', 'fi', 'fi.nid = fr.nid');

  // Join to permission table (for anonymous and authenticated users).
  $query_args = [
    ':entity_type' => 'taxonomy_term',
    ':permission' => 'view',
    ':role' => $account->isAnonymous() ? 'anonymous' : 'moderator',
    ':uid' => $account->id(),
  ];
  _thunder_forum_access_alter_query_access($query, 'fi', 'tid', $query_args);
  $properties = [
    'field' => 'fr.status',
    'operator' => '=',
    'value' => 1,
  ];
  // Find key of original status-condition.
  // @see ForumReplyStorage::queryConditionPublishingStatus().
  if (($key = _thunder_forum_access_query_find_condition($query, $properties)) !== FALSE) {
    $conditions = & $query->conditions();
    // Remove duplicate (and failing) condition.
    unset($conditions[$key]);
  }

  // Limit query to show/hide unpubished replies based on permission.
  /* @var $view_own \Drupal\Core\Database\Query\ConditionInterface */
  $view_own = $query->orConditionGroup()
    ->condition('fr.uid', $account->id())
    ->condition(1, intval($account->hasPermission('view own unpublished forum replies')));

  $access = $query->orConditionGroup()
    ->isNull('tfa.tid')
    ->condition($query->andConditionGroup()->isNotNull('tfp1.tid')->isNotNull('tfp2.tid'));

  /* @var $view \Drupal\Core\Database\Query\ConditionInterface */
  $view = $query->orConditionGroup()
    ->condition($view_own)
    ->condition($access);

  /* @var $view_unpublished \Drupal\Core\Database\Query\ConditionInterface */
  $view_unpublished = $query->andConditionGroup()
    ->condition('fr.status', 0)
    ->condition($view);

  /* @var $status \Drupal\Core\Database\Query\ConditionInterface */
  $status = $query->orConditionGroup()
    ->condition('fr.status', 1)
    ->condition($view_unpublished);

  $query->condition($status);
}

/**
 * Helper function to check if a query contains a condition for "forums".
 *
 * @param \Drupal\Core\Database\Query\ConditionInterface $condition
 *   The database condition to search for "vid = forums".
 * @param string $alias
 *   Table alias of "taxonomy_term_field_data".
 * @param string $vid
 *   Vocabulary name of forum terms (usually "forums").
 *
 * @return bool
 *   TRUE, if the query returns forum terms.
 */
function _thunder_forum_access_query_has_forum_condition(ConditionInterface $condition, $alias, $vid) {
  foreach ($condition->conditions() as $c) {
    if (is_scalar($c) || empty($c['field'])) {
      continue;
    }
    if (is_scalar($c['field']) && ("{$alias}.vid" === $c['field'])) {
      $value = $c['value'];
      if (!is_array($value)) {
        $value = [$value];
      }
      if (in_array($vid, $value)) {
        return TRUE;
      }
    }
    if ($c['field'] instanceof ConditionInterface && _thunder_forum_access_query_has_forum_condition($c['field'], $alias, $vid)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Find a condition based on given properties.
 *
 * @param \Drupal\Core\Condition\ConditionInterface $condition
 *   The condition to search in.
 * @param array $properties
 *   List of properties that needs to match.
 *
 * @return mixed
 *   The condition key or FALSE if no condition with the given properties
 *   exists.
 */
function _thunder_forum_access_query_find_condition(ConditionInterface $condition, array $properties = []) {
  foreach ($condition->conditions() as $key => $c) {
    if (is_scalar($c) || empty($c['field'])) {
      continue;
    }
    // Compare properties.
    if (is_array($c) && _thunder_forum_access_array_intersect_recursive($properties, $c) == $properties) {
      return $key;
    }
    if ($c['field'] instanceof ConditionInterface && _thunder_forum_access_query_find_condition($c['field'], $properties) !== FALSE) {
      return $key;
    }
  }
  // Fallback.
  return FALSE;
}

/**
 * Add necessary joins to the given query to limit forum access.
 *
 * @param \Drupal\Core\Database\Query\AlterableInterface $query
 *   The query to alter.
 * @param string $table_alias
 *   Table alias of base table.
 * @param string $column
 *   Column in base table to join with.
 * @param array $query_args
 *   Additional query arguments.
 */
function _thunder_forum_access_alter_query_access(AlterableInterface &$query, $table_alias, $column = 'tid', array $query_args = []) {
  // Ensure to have only terms controlled by thunder_forum_access.
  $query->leftJoin('thunder_forum_access', 'tfa', "tfa.tid = {$table_alias}.{$column}");
  // Join to permission table.
  $query->leftJoin('thunder_forum_access_permission', 'tfp1', "(tfp1.tid = {$table_alias}.{$column}) AND (tfp1.target_entity_type_id = :entity_type) AND (tfp1.permission = :permission) AND (tfp1.role = :role)", $query_args);
  // Join to collect members/moderators.
  $query->leftJoin('thunder_forum_access_user', 'tfu', "(tfu.tid = {$table_alias}.{$column}) AND (tfu.uid = :uid)", $query_args);
  // Join to permission table for members/moderators.
  $query->leftJoin('thunder_forum_access_permission', 'tfp2', "(tfp2.tid = {$table_alias}.{$column}) AND (tfp2.target_entity_type_id = :entity_type) AND (tfp2.permission = :permission) AND (tfp2.role = tfu.role)", $query_args);
}

/**
 * Helper function to intersect multi-dimensional arrays.
 *
 * @param array $array1
 *   First input.
 * @param array $array2
 *   Second input.
 *
 * @see http://php.net/manual/en/function.array-intersect.php
 *
 * @return array
 *   Intersection of both arrays.
 */
function _thunder_forum_access_array_intersect_recursive(array $array1, array $array2) {
  $result = [];
  foreach ($array1 as $key => $value) {
    if (!isset($array2[$key])) {
      continue;
    }
    if (is_array($value) && is_array($array2[$key])) {
      if ($sub_result = _thunder_forum_access_array_intersect_recursive($value, $array2[$key])) {
        $result[$key] = $sub_result;
      }
    }
    else {
      if ($value === $array2[$key]) {
        $result[$key] = $value;
      }
    }
  }
  return $result;
}
