<?php

/**
 * @file
 * Provides a subscription mechanism for forums and topics.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\flag\FlagInterface;
use Drupal\node\NodeInterface;
use Drupal\taxonomy\TermInterface;
use Drupal\thunder_notify\Event\NotificationCreateEvent;
use Drupal\thunder_notify\Event\NotificationEvents;

/**
 * Implements hook_flag_action_access().
 */
function thunder_forum_subscription_flag_action_access($action, FlagInterface $flag, AccountInterface $account, EntityInterface $flaggable = NULL) {
  $access_result = NULL;

  switch ($flag->id()) {
    // Forum subscription action.
    case 'thunder_forum_subscription_forum':
      $vid = \Drupal::config('forum.settings')->get('vocabulary');

      // Is forum taxonomy term?
      if ($flaggable instanceof TermInterface && $flaggable->bundle() === $vid) {
        // Deny subscribing to forum containers.
        if ($flaggable->hasField('forum_container') && $flaggable->forum_container->value) {
          $access_result = AccessResult::forbidden();
        }

        // Deny subscribing to forums (if not allowed to view forum).
        elseif (!$flaggable->access('view', $account)) {
          $access_result = AccessResult::forbidden();
        }
      }
      break;

    // Forum topic subscription action.
    case 'thunder_forum_subscription_topic':
      // Is forum topic node?
      if ($flaggable instanceof NodeInterface && $flaggable->bundle() === 'forum') {
        // Deny subscribing to forum topics (if not allowed to view topic).
        if (!$flaggable->access('view', $account)) {
          $access_result = AccessResult::forbidden();
        }
      }
      break;
  }

  // Return access result (if any).
  if ($access_result) {
    $access_result
      // Add account to cache information.
      ->addCacheableDependency($account)
      // Add flaggable entity to cache information.
      ->addCacheableDependency($flaggable);

    return $access_result;
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_create().
 */
function thunder_forum_subscriptions_node_create(EntityInterface $entity) {
  if (!\Drupal::moduleHandler()->moduleExists('thunder_notify') || 'forum' !== $entity->bundle()) {
    return;
  }
  if ($entity->get('taxonomy_forums')->isEmpty()) {
    return;
  }
  /* @var $forum_term \Drupal\taxonomy\TermInterface */
  if (($forum_term = $entity->get('taxonomy_forums')->first()->entity) === NULL) {
    return;
  }

  // Collect users who will be notified about the creation.
  /* @var $event_dispatcher \Symfony\Component\EventDispatcher\EventDispatcherInterface */
  $event_dispatcher = \Drupal::service('event_dispatcher');
  $data = [
    'entity' => $forum_term,
    'users' => _thunder_forum_subscriptions_get_flaggings('thunder_forum_subscription_forum', $forum_term->id(), 'taxonomy_term'),
  ];

  $event = new NotificationCreateEvent('forum_subscription', $data);
  $event_dispatcher->dispatch(NotificationEvents::CREATE, $event);
}

/**
 * Implements hook_ENTITY_TYPE_create().
 */
function thunder_forum_subscriptions_thunder_forum_reply_create(EntityInterface $entity) {
  if (!\Drupal::moduleHandler()->moduleExists('thunder_notify')) {
    return;
  }
  /* @var $entity \Drupal\thunder_forum_reply\Entity\ForumReply */

  // Collect users who will be notified about the creation.

  /* @var $event_dispatcher \Symfony\Component\EventDispatcher\EventDispatcherInterface */
  $event_dispatcher = \Drupal::service('event_dispatcher');
  $data = [
    'entity' => $entity->getRepliedNode(),
    'users' => _thunder_forum_subscriptions_get_flaggings('thunder_forum_subscription_topic', $entity->getRepliedNodeId(), 'node'),
  ];

  $event = new NotificationCreateEvent('topic_subscription', $data);
  $event_dispatcher->dispatch(NotificationEvents::CREATE, $event);
}

/**
 * Helper function to get a list of user IDs who flagged a specific entity.
 *
 * This function aims to have a much better performance than the flag API.
 *
 * @param string $flag_id
 *   ID of flag to lookup.
 * @param int $entity_id
 *   ID of entity which has been flagged.
 * @param string $entity_type
 *   Entity type of entity.
 *
 * @return array
 *   List of user IDs who flagged the entity.
 */
function _thunder_forum_subscriptions_get_flaggings($flag_id, $entity_id, $entity_type) {
  $query = \Drupal::database()->select('flagging', 'f');
  $query->fields('f', ['uid']);
  $query->condition('flag_id', $flag_id)
    ->condition('global', 0)
    ->condition('entity_id', $entity_id)
    ->condition('entity_type', $entity_type);
  return $query->execute()->fetchAllKeyed(0, 0);
}
