<?php

/**
 * @file
 * Main functions for "Thunder Message Private" module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Extension\Extension;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\flag\FlagInterface;
use Drupal\message\MessageInterface;
use Drupal\thunder_private_message\FieldDefinition;

/**
 * Implements hook_preprocess_HOOK() for private message icon.
 *
 * Default template: thunder-private-message-icon.html.twig.
 */
function template_preprocess_thunder_private_message_icon(&$variables) {
  /** @var \Drupal\message\MessageInterface $entity */
  $entity = $variables['entity'];

  /** @var \Drupal\thunder_private_message\PrivateMessageHelperInterface $private_message_helper */
  $private_message_helper = \Drupal::service('thunder_private_message.helper');

  $current_user = \Drupal::currentUser();

  // Message has been read?
  $variables['new'] = $private_message_helper->isUnreadMessage($entity, $current_user);
}

/**
 * Implements hook_entity_bundle_field_info().
 */
function thunder_private_message_entity_base_field_info(EntityTypeInterface $entity_type) {
  $definitions = [];

  if ('user' === $entity_type->id()) {
    $definitions['tpm_allow_messages'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Receive private messages'))
      ->setDescription('If checked, users will be allowed to send you private messages. Administrators are always allowed to send private messages.')
      ->setDefaultValue(TRUE)
      ->setRequired(FALSE)
      ->setDisplayOptions('form', [
        'type' => 'checkbox',
        'weight' => 0,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE);
  }

  return $definitions;
}

/**
 * Implements hook_entity_bundle_field_info().
 */
function thunder_private_message_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
  $fields = [];

  if ('message' === $entity_type->id() && 'thunder_private_message' === $bundle) {
    // Recipient.
    $fields['tpm_recipient'] = FieldDefinition::create('entity_reference')
      ->setLabel(t('Recipient'))
      ->setProvider('thunder_private_message')
      ->setDescription(t('The user ID of the message recipient.'))
      ->setRevisionable(FALSE)
      ->setSettings([
        'target_type' => 'user',
        'handler' => 'thunder_private_message:user',
        'handler_settings' => [
          'include_anonymous' => FALSE,
          'auto_create' => FALSE,
          'sort' => [
            'field' => 'name',
            'direction' => 'ASC',
          ],
        ],
      ])
      ->setCardinality(1)
      ->setRequired(TRUE)
      ->setDisplayOptions('form', [
        'type' => 'entity_reference_autocomplete',
        'weight' => -10,
        'settings' => [
          'match_operator' => 'CONTAINS',
          'size' => '60',
          'placeholder' => '',
        ],
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('form', TRUE);

    // Subject.
    $fields['tpm_title'] = FieldDefinition::create('string')
      ->setLabel(t('Subject'))
      ->setProvider('thunder_private_message')
      ->setDescription(t('The message subject.'))
      ->setRevisionable(FALSE)
      ->setDefaultValue('')
      ->setRequired(TRUE)
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => 0,
      ])
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'type' => 'string',
        'weight' => 1,
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('form', TRUE);

    // Message.
    $fields['tpm_message'] = FieldDefinition::create('text_long')
      ->setLabel(t('Message'))
      ->setProvider('thunder_private_message')
      ->setDescription(t('The message body.'))
      ->setRevisionable(FALSE)
      ->setDefaultValue('')
      ->setRequired(TRUE)
      ->setDisplayOptions('form', [
        'type' => 'text_textarea',
        'weight' => 10,
        'settings' => [
          'rows' => 4,
        ],
      ])
      ->setDisplayOptions('view', [
        'label' => 'hidden',
        'type' => 'string',
        'weight' => 2,
      ])
      ->setDisplayConfigurable('view', TRUE)
      ->setDisplayConfigurable('form', TRUE);
  }

  return $fields;
}

/**
 * Implements hook_entity_extra_field_info().
 */
function thunder_private_message_entity_extra_field_info() {
  $info = [];

  // Private message icon.
  $info['message']['thunder_private_message']['display']['icon'] = [
    'label' => t('Icon'),
    'description' => t('Private message icon.'),
    'weight' => 100,
    'visible' => FALSE,
  ];

  return $info;
}

/**
 * Implements hook_entity_field_storage_info().
 */
function thunder_private_message_entity_field_storage_info(EntityTypeInterface $entity_type) {
  $result = [];
  if ('message' === $entity_type->id()) {
    // Recipient.
    $result['tpm_recipient'] = FieldStorageConfig::create([
      'field_name' => 'tpm_recipient',
      'type' => 'entity_reference',
      'entity_type' => $entity_type->id(),
      'settings' => [
        'target_type' => 'user',
      ],
    ])->setTranslatable(FALSE)->setCardinality(1);

    // Subject.
    $result['tpm_title'] = FieldStorageConfig::create([
      'field_name' => 'tpm_title',
      'entity_type' => $entity_type->id(),
      'type' => 'string',
      'settings' => [],
    ])->setTranslatable(FALSE);

    // Message.
    $result['tpm_message'] = FieldStorageConfig::create([
      'field_name' => 'tpm_message',
      'entity_type' => $entity_type->id(),
      'type' => 'text_long',
      'settings' => [],
    ])->setTranslatable(FALSE);
  }

  return $result;
}

/**
 * Implements hook_entity_type_alter().
 */
function thunder_private_message_entity_type_alter(array &$entity_types) {
  if (isset($entity_types['message'])) {
    $entity_types['message']
      ->setFormClass('thunder_private_message_form', 'Drupal\thunder_private_message\Form\PrivateMessageForm')
      ->setLinkTemplate('thunder_private_message_form', '/user/{user}/private-message/create/{recipient}')
      ->setFormClass('thunder_private_message_reply_form', 'Drupal\thunder_private_message\Form\PrivateMessageForm')
      ->setLinkTemplate('thunder_private_message_reply_form', '/user/{user}/private-message/reply/{message}');
  }
}

/**
 * Implements hook_flag_action_access().
 */
function thunder_private_message_flag_action_access($action, FlagInterface $flag, AccountInterface $account, EntityInterface $flaggable = NULL) {
  $access = AccessResult::neutral();

  if ('thunder_private_message_deleted' === $flag->id()) {
    /** @var \Drupal\thunder_private_message\PrivateMessageHelperInterface $private_message_helper */
    $private_message_helper = \Drupal::service('thunder_private_message.helper');

    if ($flaggable && $flaggable instanceof MessageInterface) {
      switch ($action) {
        case 'flag':
          // Only allow sender/recipient to mark message as deleted/restored.
          $access = $access->orIf(AccessResult::forbiddenIf(!$private_message_helper->userIsSender($account, $flaggable) && !$private_message_helper->userIsRecipient($account, $flaggable)));
          break;

        case 'unflag':
          $access = AccessResult::allowedIf($private_message_helper->userIsSender($account, $flaggable) || $private_message_helper->userIsRecipient($account, $flaggable));
          break;
      }
    }
  }

  return $access;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function thunder_private_message_form_user_admin_permissions_alter(&$form, FormStateInterface $form_state, $form_id) {
  $disabled_permissions = [
    'delete thunder_private_message message',
    'edit thunder_private_message message',
  ];

  // Load all defined user roles.
  $roles = user_role_names();

  // Disable irrelevant private message permission checkboxes.
  foreach ($disabled_permissions as $permission) {
    foreach ($roles as $role => $role_label) {
      if (isset($form['permissions'][$permission][$role])) {
        $form['permissions'][$permission][$role]['#disabled'] = TRUE;
      }
    }
  }
}

/**
 * Implements hook_locale_translation_projects_alter().
 */
function thunder_private_message_locale_translation_projects_alter(&$projects) {
  // Module provides own translation files.
  $projects['thunder_private_message']['info']['interface translation server pattern'] = drupal_get_path('module', 'thunder_private_message') . '/translations/%project.%language.po';
}

/**
 * Implements hook_ENTITY_TYPE_access() for message entities.
 */
function thunder_private_message_message_access(EntityInterface $message, $operation, AccountInterface $account) {
  $access = AccessResult::neutral();

  if ('thunder_private_message' === $message->bundle()) {
    /** @var \Drupal\thunder_private_message\PrivateMessageHelperInterface $private_message_helper */
    $private_message_helper = \Drupal::service('thunder_private_message.helper');

    // Is administrator?
    $account_is_admin = $private_message_helper->userIsAllowedToBypassAccessChecks($account);

    // Is sender?
    $account_is_sender = $private_message_helper->userIsSender($account, $message);

    // Is recipient?
    $account_is_recipient = $private_message_helper->userIsRecipient($account, $message);

    // User is allowed to bypass access checks?
    $access = AccessResult::allowedIf($account_is_admin);

    switch ($operation) {
      case 'view':
        /* @var $flag_service \Drupal\flag\FlagServiceInterface */
        $flag_service = \Drupal::service('flag');

        /* @var $flag \Drupal\flag\FlagInterface */
        $flag = $flag_service->getFlagById('thunder_private_message_deleted');

        // Message is marked as deleted?
        $access = $access->orIf(AccessResult::forbiddenIf($flag->isFlagged($message, $account)));

        // User is not admin/sender/recipient?
        $access = $access->orIf(AccessResult::forbiddenIf(!$account_is_admin && !$account_is_sender && !$account_is_recipient));

        // Add flag to cache dependencies.
        $access->addCacheableDependency($flag);
        break;

      case 'edit':
      case 'delete':
        // Private messages must not be edited and are only marked as deleted
        // via flag. But let the superuser have a chance to edit/delete private
        // messages.
        $access = AccessResult::forbiddenIf(\Drupal::currentUser()->id() !== 1);
    }

    // Add message to cache dependencies.
    $access->addCacheableDependency($message);
  }

  return $access;
}

/**
 * Implements hook_ENTITY_TYPE_view() for message entities.
 */
function thunder_private_message_message_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ('thunder_private_message' === $entity->bundle()) {
    // Icon.
    if ($display->getComponent('icon')) {
      $build['icon'] = [
        '#lazy_builder' => [
          'thunder_private_message.lazy_builder:renderIcon',
          [
            $entity->id(),
          ],
        ],
        '#create_placeholder' => TRUE,
      ];
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_create_access() for message entities.
 */
function thunder_private_message_message_create_access(AccountInterface $account, array $context, $entity_bundle) {
  $access = AccessResult::neutral();

  if ('thunder_private_message' === $entity_bundle) {
    /** @var \Drupal\thunder_private_message\PrivateMessageHelperInterface $private_message_helper */
    $private_message_helper = \Drupal::service('thunder_private_message.helper');

    /** @var \Drupal\Core\Session\AccountInterface $recipient */
    $recipient = !empty($context['recipient']) && $context['recipient'] instanceof AccountInterface ? $context['recipient'] : NULL;

    /** @var \Drupal\message\MessageInterface $reply_to */
    $reply_to = !empty($context['reply_to']) && $context['reply_to'] instanceof MessageInterface ? $context['reply_to'] : NULL;

    // Is administrator?
    $account_is_admin = $private_message_helper->userIsAllowedToBypassAccessChecks($account);

    // User is allowed to bypass access checks?
    $access = AccessResult::allowedIf($account_is_admin);

    // Recipient allows private messages?
    if ($recipient) {
      $access = $access->andIf(AccessResult::forbiddenIf(!$private_message_helper->userCanWriteMessageToOtherUser($recipient, $account)))
        ->cachePerUser()
        ->addCacheableDependency($recipient);
    }

    // Is a reply to another message?
    if ($reply_to) {
      if (!$recipient) {
        $recipient = $reply_to->getOwner();
      }

      $access = $access->andIf(AccessResult::forbiddenIf($reply_to->getOwnerId() !== $recipient->id()));

      // Add cache dependencies.
      $access
        ->cachePerUser()
        ->addCacheableDependency($reply_to);
    }
  }

  return $access;
}

/**
 * Implements hook_system_info_alter().
 */
function thunder_private_message_system_info_alter(array &$info, Extension $file, $type) {
  // Ensure 'project' key in info.
  if ($file->getName() === 'thunder_private_message') {
    $info['project'] = $file->getName();
  }
}

/**
 * Implements hook_theme().
 */
function thunder_private_message_theme($existing, $type, $theme, $path) {
  $items = [];

  // Private message icon.
  $items['thunder_private_message_icon'] = [
    'variables' => [
      'entity' => NULL,
      'new' => NULL,
    ],
  ];

  // Unread message count.
  $items['thunder_private_message_unread_count'] = [
    'variables' => [
      'unread_count' => 0,
    ],
  ];

  return $items;
}
